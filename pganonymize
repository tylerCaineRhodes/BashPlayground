#! /opt/homebrew/bin/bash

readonly LOCAL_URL=$1
readonly DUMPDIR=$2

if [ -z "$LOCAL_URL" ]; then
  echo "Error: LOCAL_URL is required."
  exit 1
elif [ -z "$DUMPDIR" ]; then
  echo "Error: DUMPDIR is required."
  exit 1
fi

TEMP_DUMP="${DUMPDIR}/anonymized.sql"

echo "Starting anonymization using pg-anonymizer..."

# Create a temporary package.json if it doesn't exist
if [ ! -f package.json ]; then
    echo '{"private": true}' > package.json
fi

# Install pg-anonymizer locally
npm install pg-anonymizer --no-package-lock

# Extract database name from URL
DB_NAME=$(echo $LOCAL_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')

# Run pg-anonymizer from node_modules
./node_modules/.bin/pg-anonymizer "$LOCAL_URL" -o "$TEMP_DUMP" \
  --columns "first_name:faker.name.firstName,last_name:faker.name.lastName,email:faker.internet.email,username:faker.internet.userName"

if [ $? -ne 0 ]; then
  echo "Error: Anonymization failed."
  rm -f "$TEMP_DUMP"
  rm -rf node_modules package.json # cleanup
  exit 1
fi

echo "Restoring anonymized data..."
# Drop and recreate database
dropdb --if-exists "$DB_NAME"
createdb "$DB_NAME"

# Restore with clean (-c) flag
psql -d "$DB_NAME" -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" 
psql -d "$DB_NAME" -f "$TEMP_DUMP"

if [ $? -ne 0 ]; then
  echo "Error: Failed to restore anonymized data."
  rm -f "$TEMP_DUMP"
  rm -rf node_modules package.json # cleanup
  exit 1
fi

rm -f "$TEMP_DUMP"
rm -rf node_modules package.json # cleanup
echo "Anonymization completed successfully!"
